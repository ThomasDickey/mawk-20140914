# $MawkId: Makefile.in,v 1.38 2010/06/22 23:10:31 tom Exp $
# Makefile-template for MAWK

SHELL=/bin/sh

####################################

srcdir		= @srcdir@
srcdir_sl	= @srcdir@/
VPATH		= @srcdir@

x               = @EXEEXT@
o               = .@OBJEXT@

prefix          = @prefix@
exec_prefix     = @exec_prefix@

srcdir		= @srcdir@

manext		= 1
bindir		= @bindir@
mandir		= @mandir@/man$(manext)

CC              = @CC@
CPP             = @CPP@

CPPFLAGS	= -I. -I$(srcdir) -DHAVE_CONFIG_H @CPPFLAGS@
EXTRA_CFLAGS	= @EXTRA_CFLAGS@
CFLAGS          = @CFLAGS@ $(EXTRA_CFLAGS)
LDFLAGS         = @CFLAGS@ @LDFLAGS@
LIBS            = @LIBS@

YACC            = @YACC@

CTAGS		= @CTAGS@
ETAGS		= @ETAGS@

LINT		= @LINT@
LINTOPTS	= 

INSTALL         = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA    = @INSTALL_DATA@
transform	= @program_transform_name@

# where to put mawk
BINDIR          = $(DESTDIR)$(bindir)

# where to put the man pages
MANDIR          = $(DESTDIR)$(mandir)

#######################################

actual_PROG  = `echo mawk|    sed '$(transform)'`
binary_PROG  = $(actual_PROG)$x

PROG  = mawk$x

OBJS = parse$o scan$o memory$o main$o hash$o execute$o code$o \
  da$o error$o init$o bi_vars$o cast$o print$o bi_funct$o \
  kw$o jmp$o array$o field$o split$o re_cmpl$o regexp$o zmalloc$o \
  fin$o files$o scancode$o matherr$o fcall$o version$o \
  missing$o

.SUFFIXES: .c .i $o

.c.i :
	@RULE_CC@
	@ECHO_CC@$(CPP) -C $(CPPFLAGS) $< >$@
.c$o :
	@RULE_CC@
	@ECHO_CC@$(CC) -c $(CPPFLAGS) $(CFLAGS) $<

all :	$(PROG)

check :  mawk_test fpe_test

$(PROG) : $(OBJS)
	@ECHO_LD@$(CC) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)

CHECK	= MAWK=`pwd`/$(PROG); export MAWK; cd $(srcdir)/test; echo "** $@"

mawk_test :  $(PROG)  # test that we have a sane mawk
	@sh -c '$(CHECK); ./mawktest'

fpe_test :  $(PROG) # test FPEs are handled OK
	@sh -c '$(CHECK); ./fpe_test'

parse.c  : parse.y
	@echo  expect 4 shift/reduce conflicts
	$(YACC) -d parse.y
	mv y.tab.c parse.c
	-if cmp -s y.tab.h parse.h ;\
	   then rm y.tab.h ;\
	   else mv y.tab.h parse.h ; fi

NOIDENT = sed -e 's/[$$]MawkId\([^$$]*\)[$$]/@MawkId\1@/'

array.c : array.w
	-@rm -f $@
	notangle -R'"array.c"' array.w | $(NOIDENT) | cpif array.c

array.h : array.w
	-@rm -f $@
	notangle -R'"array.h"' array.w | $(NOIDENT) | cpif array.h

scancode.c :  $(srcdir)/makescan.c  scancode.h nstd.h config.h
	@ECHO_LD@$(CC) $(CFLAGS) $(CPPFLAGS) -o makescan.exe $(srcdir)/makescan.c
	rm -f scancode.c
	./makescan.exe > scancode.c
	rm makescan.exe

MAWK_BIN = $(BINDIR)/$(binary_PROG)
MAWK_MAN = $(MANDIR)/$(actual_PROG).$(manext)

install :  $(BINDIR) $(MANDIR) $(PROG)
	$(INSTALL_PROGRAM) $(PROG) $(MAWK_BIN)
	$(INSTALL_DATA) man/mawk.1 $(MAWK_MAN)

uninstall :
	rm -f $(MAWK_BIN)
	rm -f $(MAWK_MAN)

clean :
	rm -f y.tab.c y.tab.h makescan.exe
	rm -f *$o test/$(PROG) *core* test/*core* $(PROG)

distclean :  clean
	rm -f config.h Makefile \
	    config.status config.log config.cache
	rm -f scancode.c
	rm -f defines.out maxint.out fpe_check$x tags makedeps.awk

maintainer-clean :  distclean
	rm -f parse.c parse.h
	rm -f array.c array.h
	rm -f configure config.guess config.sub install-sh
	rm -fr autom4te.cache

lint :
	$(LINT) $(LINTOPTS) $(CPPFLAGS) $(OBJS:$o=.c)

tags :
	$(CTAGS) *.[ch] */*.[ch]

@MAKE_UPPER_TAGS@TAGS :
@MAKE_UPPER_TAGS@	$(ETAGS) *.[ch] */*.[ch]

$(BINDIR) \
$(MANDIR) :
	mkdir -p "$@"

# output from makedeps.sh
array.o : array.h bi_vars.h config.h field.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
bi_funct.o : array.h bi_funct.h bi_vars.h config.h field.h files.h fin.h init.h mawk.h memory.h nstd.h regexp.h repl.h sizes.h symtype.h types.h zmalloc.h
bi_vars.o : array.h bi_vars.h config.h field.h init.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
cast.o : array.h config.h field.h mawk.h memory.h nstd.h parse.h repl.h scan.h scancode.h sizes.h symtype.h types.h zmalloc.h
code.o : array.h code.h config.h field.h init.h jmp.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
da.o : array.h bi_funct.h code.h config.h field.h mawk.h memory.h nstd.h repl.h sizes.h symtype.h types.h zmalloc.h
error.o : array.h bi_vars.h config.h mawk.h nstd.h parse.h scan.h scancode.h sizes.h symtype.h types.h
execute.o : array.h bi_funct.h bi_vars.h code.h config.h field.h fin.h mawk.h memory.h nstd.h regexp.h repl.h sizes.h symtype.h types.h zmalloc.h
fcall.o : array.h code.h config.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
field.o : array.h bi_vars.h config.h field.h init.h mawk.h memory.h nstd.h parse.h regexp.h repl.h scan.h scancode.h sizes.h symtype.h types.h zmalloc.h
files.o : array.h config.h files.h fin.h init.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
fin.o : array.h bi_vars.h config.h field.h fin.h mawk.h memory.h nstd.h parse.h scan.h scancode.h sizes.h symtype.h types.h zmalloc.h
hash.o : array.h config.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
init.o : array.h bi_vars.h code.h config.h field.h init.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
jmp.o : array.h code.h config.h init.h jmp.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
kw.o : array.h config.h init.h mawk.h nstd.h parse.h sizes.h symtype.h types.h
main.o : array.h code.h config.h files.h init.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
makescan.o : config.h nstd.h scancode.h
matherr.o : array.h config.h init.h mawk.h nstd.h sizes.h symtype.h types.h
memory.o : config.h mawk.h memory.h nstd.h sizes.h types.h zmalloc.h
missing.o : config.h nstd.h scancode.h
parse.o : array.h bi_funct.h bi_vars.h code.h config.h field.h files.h jmp.h mawk.h memory.h nstd.h sizes.h symtype.h types.h zmalloc.h
print.o : array.h bi_funct.h bi_vars.h config.h field.h files.h mawk.h memory.h nstd.h parse.h scan.h scancode.h sizes.h symtype.h types.h zmalloc.h
re_cmpl.o : array.h config.h mawk.h memory.h nstd.h parse.h regexp.h repl.h scan.h scancode.h sizes.h symtype.h types.h zmalloc.h
scan.o : array.h code.h config.h field.h files.h fin.h init.h mawk.h memory.h nstd.h parse.h repl.h scan.h scancode.h sizes.h symtype.h types.h zmalloc.h
split.o : array.h bi_funct.h bi_vars.h config.h field.h mawk.h memory.h nstd.h parse.h regexp.h repl.h scan.h scancode.h sizes.h symtype.h types.h zmalloc.h
version.o : array.h config.h init.h mawk.h nstd.h patchlev.h sizes.h symtype.h types.h
zmalloc.o : config.h mawk.h nstd.h sizes.h types.h zmalloc.h
regexp.o : rexpdb.c rexp4.c rexp2.c regexp_system.c sizes.h mawk.h rexp0.c rexp1.c config.h rexp.h regexp.h nstd.h rexp3.c rexp.c field.h
